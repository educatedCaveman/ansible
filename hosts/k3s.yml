# configure Kubernetes cluster using k3s
- name: configure K3S Cluster Nodes
  hosts:
    - k3s
  roles: 
    - VM_role
    - git_config_role
    - git_dotfiles_role
    - linux_role
    - drake_role
    # - docker_role
  tasks:

# - name: Manager-Specific Node Configuration
#   hosts:
#     - k3s_managers
#   roles:
#   tasks:

#     - name: Install helm if not exists
#       unarchive:
#         src: https://get.helm.sh/helm-v3.15.3-linux-amd64.tar.gz
#         dest: /usr/local/bin
#         extra_opts: "--strip-components=1"
#         owner: root
#         group: root
#         mode: 0755
#         remote_src: true
#       args:
#         creates: /usr/local/bin/helm    


- name: Worker-Specific Node Configuration
  hosts:
    - k3s_workers
  roles:
    - nfs_base_role
    - nfs_music_role
    - nfs_video_role
    - nfs_staging_role
    - nfs_docs_role
    - nfs_pics_role
  tasks:

- name: Worker-Specific Node Configuration
  hosts:
    - k3s_data
  vars:
    disks:
      - device:     /dev/sdb
        partition:  /dev/sdb1
        mount_dir:  /var/lib/longhorn
      # - device:     /dev/sdc
      #   partition:  /dev/sdc1
      #   mount_dir:  /mnt/fast
  tasks:

    # need to format the drive
    - name: check the partitions
      community.general.parted:
        device: "{{ item.device }}"
        unit: MiB
      loop: "{{ disks|flatten(levels=1) }}"

    - name: create partition
      community.general.parted:
        device: "{{ item.device }}"
        number: 1
        label:  gpt
        state:  present
      loop: "{{ disks|flatten(levels=1) }}"

    - name: create filesystem
      community.general.filesystem:
        fstype: ext4
        state:  present
        device: "{{ item.partition }}"
      loop: "{{ disks|flatten(levels=1) }}"

    # # create the mount directory, if needed:
    # - name: check if the directory exists
    #   stat:
    #     path: "{{ item.mount_dir }}"
    #   loop: "{{ disks|flatten(levels=1) }}"

    - name: create the device mount directory
      file:
        path: "{{ item.mount_dir }}"
        state:  directory
        recurse:  yes
      loop: "{{ disks|flatten(levels=1) }}"
      # when: not k3s_mount.stat.exists

    - name: mount the drive
      mount:
        src:  "{{ item.partition }}"
        path: "{{ item.mount_dir }}"
        fstype: ext4
        state:  mounted
      loop: "{{ disks|flatten(levels=1) }}"

    # packages and services for longhorn
    - name: install longhorn prerequisites
      apt:
        name:
          - open-iscsi
          - nfs-common
        state:  latest

    - name: start and enable services
      systemd:
        name:   "{{ item }}.service"
        state:  started
        enabled:  yes
      loop:
        - open-iscsi

        