- name: configure seedbox
  hosts:  seedbox
  # roles:
  #   - LXC_role            # base LXC container config
  #   - git_dotfiles_role   # deploy the dotfiles repo
  #   - apt_client_role
  #   - LXC_netplan_MTU     # use the mtu9000 netplan config
  #   - linux_role          # base linux configs
  #   - client_ssh_keys
  #   - drake_role          # drake home directory permissions
  #   - nfs_base_role       
  #   - nfs_video_role
  #   - nfs_music_role
  #   - nfs_staging_role
  #   - role: telegraf_role
  #     vars:
  #       telegraf_config:  'telegraf_base.conf'
  vars:
    - config_dir: '/home/qbittorrent-nox/.config/qBittorrent'
    - dotfiles_dir: '/home/drake/dotfiles/qbittorrent'
  tasks:

  - name: install qbittorrent and related dependencies
    apt:
      name:
        - qbittorrent-nox
        - openvpn 
        - openvpn-systemd-resolved
        
        # sonarr
        - gnupg
        - ca-certificates

        # radarr/lidar
        - curl
        - mediainfo
        - sqlite3

        # lidarr
        - libchromaprint-tools
        
        # jacket
        # - libicu65
        # - libssl1.1

      state:  latest

  #* create users and groups
  # base system users and groups
  - name: create the system users
    include_role:
      name: create_system_user_role
    vars:
      system_user: "{{ item }}"
    loop:
      - qbittorrent-nox
      - media
      - sonarr
      - radarr
      - lidarr
      - jackett

  # add the users to the media group
  # drake might be redundant
  - name: add the users to the media group
    user:
      name: "{{ item }}"
      groups:
        - media
        - "{{ item }}"
      append: yes      
    loop:
      - drake
      - qbittorrent-nox
      - sonarr
      - radarr
      - lidarr
      - jackett


  # #* qBittorrent configs
  # - name: check for existing qBittorrent.conf
  #   stat:
  #     path: "{{ config_dir }}/qBittorrent.conf"
  #   register: conf_1

  # - name: remove existing qBittorrent.conf
  #   file:
  #     path:   "{{ config_dir }}/qBittorrent.conf"
  #     state:  absent
  #   when: 
  #     - conf_1.stat.exists
  #     - conf_1.stat.islnk is defined
  #     - conf_1.stat.islnk == False

  # - name: link new qBittorrent.conf
  #   file:
  #     src:  "{{ dotfiles_dir }}/qBittorrent.conf"
  #     dest: "{{ config_dir }}/qBittorrent.conf"
  #     owner:  qbittorrent-nox
  #     group:  qbittorrent-nox
  #     state:  link
  #   when: 
  #     - conf_1.stat.exists
  #     - conf_1.stat.islnk is defined
  #     - conf_1.stat.islnk == False

  # - name: check for existing qBittorrent-data.conf
  #   stat:
  #     path: "{{ config_dir }}/qBittorrent-data.conf"
  #   register: conf_2

  # - name: remove existing qBittorrent-data.conf
  #   file:
  #     path:   "{{ config_dir }}/qBittorrent-data.conf"
  #     state:  absent
  #   when: 
  #     - conf_2.stat.exists
  #     - conf_2.stat.islnk is defined
  #     - conf_2.stat.islnk == False

  # - name: link new qBittorrent-data.conf
  #   file:
  #     src:  "{{ dotfiles_dir }}/qBittorrent-data.conf"
  #     dest: "{{ config_dir }}/qBittorrent-data.conf"
  #     owner:  qbittorrent-nox
  #     group:  qbittorrent-nox
  #     state:  link
  #   when: 
  #     - conf_2.stat.exists
  #     - conf_2.stat.islnk is defined
  #     - conf_2.stat.islnk == False

  # TODO: install the openvpn config?

  #* ExpressVPN
  # download the .deb
  # - name: download and install ExpressVPN
  #   apt:
  #     deb:  https://www.expressvpn.works/clients/linux/expressvpn_3.14.0.4-1_amd64.deb

  # firewall rules:
  # allow ssh in and out
  # allow openvpn port (1195?) in and out
  # block all other access


  # TODO: install/configure Sonarr, Radarr, Lidarr, Jacket, etc.?
  # if i were to use docker containers, i wouldn't have the ability to have the firewall VPN check

  # #* Sonarr
  # - name: add the Mono APT key
  #   apt_key:
  #     id: 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
  #     keyserver:  keyserver.ubuntu.com
  #     state:      present

  # - name: add Mono repo
  #   apt_repository:
  #     repo: deb https://download.mono-project.com/repo/ubuntu stable-focal main

  # - name: install Mono
  #   apt:
  #     name:   mono-devel
  #     state:  latest
  #     update_cache: yes

  # - name: add the Sonarr APT key
  #   apt_key:
  #     # id: 2009837CBFFD68F45BC180471F4F90DE2A9B4BF8
  #     id: A236C58F409091A18ACA53CBEBFF6B99D9B78493
  #     keyserver:  keyserver.ubuntu.com
  #     state:      present

  # - name: add Sonarr repo
  #   apt_repository:
  #     repo: deb http://apt.sonarr.tv/ master main

  # - name: install Sonar (nzbdrone)
  #   apt:
  #     name:   nzbdrone
  #     state:  latest
  #     update_cache: yes

  # #* Radarr
  # # this was derived from the "Hands on Install" here:
  # # https://wiki.servarr.com/radarr/installation#linux
  # - name: create /var/lib/radarr
  #   file:
  #     path:   /var/lib/radarr
  #     state:  directory

  # - name: check for existing install
  #   stat:
  #     path: /opt/Radarr/
  #   register: radarr_install

  # - name: create install directory
  #   file:
  #     path:   /opt/Radarr/
  #     state:  directory
  #   when: not radarr_install.stat.exists

  # - name: retrieve and extract archive
  #   unarchive:
  #     src:  'http://radarr.servarr.com/v1/update/master/updatefile?os=linux&runtime=netcore&arch=x64'
  #     dest: /tmp/
  #     remote_src: yes
  #   when: not radarr_install.stat.exists

  # - name: install Radarr and set permissions
  #   copy:
  #     src:    /tmp/Radarr/
  #     dest:   /opt/Radarr/
  #     mode:   u=rw
  #     owner:  radarr
  #     group:  radarr
  #     remote_src: yes
  #   when: not radarr_install.stat.exists

  #* Lidarr
  # this was derived from the "Hands on Install" here:
  # https://wiki.servarr.com/lidarr/installation#Debian.2FUbuntu
  - name: create /var/lib/lidarr
    file:
      path:   /var/lib/lidarr
      owner:  lidarr
      group:  lidarr
      state:  directory

  - name: check for existing install
    stat:
      path: /opt/Lidarr/
    register: lidarr_install

  - name: create install directory
    file:
      path:   /opt/Lidarr/
      owner:  lidarr
      group:  lidarr
      state:  directory
    when: not lidarr_install.stat.exists

  - name: retrieve and extract archive
    unarchive:
      src:  'http://lidarr.servarr.com/v1/update/master/updatefile?os=linux&runtime=netcore&arch=x64'
      dest: /tmp/
      remote_src: yes
    when: not lidarr_install.stat.exists

  - name: install Lidarr and set permissions
    copy:
      src:    /tmp/Lidarr/
      dest:   /opt/Lidarr/
      # mode:   u=rw
      owner:  lidarr
      group:  lidarr
      remote_src: yes
    when: not lidarr_install.stat.exists  

  #* Jacket
  # https://github.com/Jackett/Jackett
  # https://github.com/Jackett/Jackett/releases/download/v0.20.244/Jackett.Binaries.LinuxAMDx64.tar.gz
  - name: retrieve and extract archive
    unarchive:
      src:  https://github.com/Jackett/Jackett/releases/download/v0.20.244/Jackett.Binaries.LinuxAMDx64.tar.gz
      dest: /home/jackett
      remote_src: yes  

  #* install service files, and restart services  
  - name: install the service files and restart the services
    include_role:
      name: install_service_file_role
    vars:
      service_name: "{{ item }}"
      service_file_loc: "/home/drake/dotfiles/qbittorrent"
    loop:
      - qbittorrent-nox
      - sonarr
      - radarr
      - lidarr
      # - jacket